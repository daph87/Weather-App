{"version":3,"sources":["Redux/Enums/weatherTypes.ts","reportWebVitals.ts","Helpers/showUnit.ts","Services/api.ts","global.ts","Redux/Enums/favoritesCitiesTypes.ts","Redux/Actions/actions-creators/weatherAction.ts","Redux/Actions/actions-creators/favoritesCitiesAction.ts","Helpers/getWeatherIconUrl.ts","Components/Home/WeatherComponents/WeatherCard.tsx","assets/loader.gif","Components/Widgets/Loader/Loader.tsx","Components/Favorites/OneFavoritesCity.tsx","Components/Favorites/FavoritesCities.tsx","Components/Themes/GlobalStyles.ts","Components/Themes/Themes.ts","Components/Header/Header.tsx","Services/getAutoComplete.ts","Components/Widgets/Modal/Modal.tsx","Components/Home/SearchBar/SearchBar.tsx","Components/Home/FavoriteIcon/FavoriteButton.tsx","Components/Home/FiveDaysForecast/DailyForecast.tsx","Components/Home/FiveDaysForecast/FiveDaysForecast.tsx","Components/Home/Home.tsx","Services/getGeolocalisation.ts","Components/Layout.tsx","Redux/Reducers/favoritesCitiesReducer.ts","Redux/Reducers/weatherReducer.ts","Redux/Reducers/rootReducer.ts","Redux/store.ts","index.tsx"],"names":["WeatherTypes","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","showUnit","unit","currentWeather","Temperature","Imperial","Value","Unit","Metric","api","axios","create","baseURL","FavoritesCitiesTypes","apikey","getCurrentWeather","city","dispatch","a","get","Key","response","data","type","CURRENT_WEATHER","payload","error","CURRENT_WEATHER_ERROR","message","setCity","SET_CITY","closeModal","CLOSE_MODAL","setUnitConversion","SET_UNIT_CONVERSION","getFiveDaysForecast","FIVE_DAYS_FORECAST","FIVE_DAYS_FORECAST_ERROR","console","log","addCityToFavorites","ADD_FAVORITE_CITY","deleteCityFromFavorites","id","DELETE_FAVORITE_CITY","getWeatherIconUrl","iconNumber","WeatherCard","props","cardKey","cityName","iconSource","alt","temperature","iconPhrase","onClick","className","src","Loader","loader","OneFavoritesCity","useState","undefined","setCurrentWeather","history","useHistory","useSelector","state","weatherInfo","useDispatch","bindActionCreators","weatherActionCreators","useEffect","getFavCurrentWeather","favCurrentWeater","onGoBack","push","WeatherText","WeatherIcon","LocalizedName","Favorites","favoritesCities","favoritesCitiesInfo","map","GlobalStyles","createGlobalStyle","theme","body","text","color","lightTheme","toggleBorder","background","darkTheme","Header","setTheme","icon","faToggleOff","faToggleOn","exact","to","getLocationsAutoComplete","res","ModalComponent","show","Modal","onHide","closeButton","Title","Body","Footer","Button","variant","SearchBar","cityInput","setCityInput","locations","setLocations","showAutoComplete","setShowAutoComplete","setShow","setMessage","doSearch","useRef","debounce","current","onChange","event","target","value","test","label","location","chooseCity","Country","FavoriteButton","favoritesCitiesActionCreators","toggleFav","find","fav","toggleFavorites","faStar","size","DailyForecast","dailyForecast","maxTemp","Maximum","minTemp","Minimum","moment","Date","format","Day","Icon","IconPhrase","FiveDaysForecast","fiveDaysForecast","Headline","Text","DailyForecasts","EpochDate","Home","showModal","modalMessageCurrent","currentWeatherError","fiveDaysForecastError","modalMessageForecast","navigator","permissions","query","name","result","geolocation","getCurrentPosition","coords","latitude","longitude","catch","getCityWithGeolocalisation","modalMessage","renderCurrentWeather","Layout","path","component","from","initialState","rootReducer","combineReducers","action","filter","persistConfig","key","storage","AsyncStorage","persistedReducer","persistReducer","store","createStore","compose","composeWithDevTools","applyMiddleware","thunk","reduxStore","persistor","persistStore","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f6831756.chunk.js","sourcesContent":["/** @format */\n\nexport enum WeatherTypes {\n  CURRENT_WEATHER = \"CURRENT_WEATHER\",\n  CURRENT_WEATHER_ERROR = \"CURRENT_WEATHER_ERROR\",\n  SET_CITY = \"SET_CITY\",\n  SET_UNIT_CONVERSION = \"SET_UNIT_CONVERSION\",\n  FIVE_DAYS_FORECAST = \"FIVE_DAYS_FORECAST\",\n  FIVE_DAYS_FORECAST_ERROR = \"FIVE_DAYS_FORECAST_ERROR\",\n  CLOSE_MODAL = \"CLOSE_MODAL\",\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","/** @format */\n\nimport { CurrentWeatherData } from \"../Types/CurrentWeatherDataType\";\n\nexport const showUnit = (unit: string, currentWeather: CurrentWeatherData) => {\n  const checkUnit =\n    unit !== \"C\"\n      ? `${currentWeather.Temperature.Imperial.Value}° ${currentWeather.Temperature.Imperial.Unit}`\n      : `${currentWeather.Temperature.Metric.Value}° ${currentWeather.Temperature.Metric.Unit}`;\n  return checkUnit;\n};\n","/** @format */\n\nimport axios from \"axios\";\n\nconst api = axios.create({\n  baseURL: \"http://dataservice.accuweather.com/\",\n});\n\nexport default api;\n","/** @format */\n\nexport const apikey = \"HJEPQTZCWxhq8IqpXFNwM9vbUgHi1PHP\";\n","/** @format */\n\nexport enum FavoritesCitiesTypes {\n  ADD_FAVORITE_CITY = \"ADD_FAVORITE_CITY\",\n  DELETE_FAVORITE_CITY = \"DELETE_FAVORITE_CITY\",\n}\n","/** @format */\nimport { Dispatch } from \"redux\";\n\nimport api from \"../../../Services/api\";\nimport { WeatherTypes } from \"../../Enums/weatherTypes\";\nimport { ActionWeather } from \"../types/weather\";\nimport { CityData } from \"../../../Types/CityDataType\";\nimport { apikey } from \"../../../global\";\n\n// apikey=HJEPQTZCWxhq8IqpXFNwM9vbUgHi1PHP\nexport const getCurrentWeather =\n  (city: CityData) => async (dispatch: Dispatch<ActionWeather>) => {\n    let data;\n    await api.get(`currentconditions/v1/${city.Key}?apikey=${apikey}`).then(\n      (response) => {\n        data = response.data[0];\n\n        dispatch({\n          type: WeatherTypes.CURRENT_WEATHER,\n          payload: data,\n        });\n      },\n      (error) => {\n        dispatch({\n          type: WeatherTypes.CURRENT_WEATHER_ERROR,\n          payload: error.message,\n        });\n      }\n    );\n    return data;\n  };\n\nexport const setCity =\n  (city: CityData) => (dispatch: Dispatch<ActionWeather>) => {\n    dispatch({\n      type: WeatherTypes.SET_CITY,\n      payload: city,\n    });\n  };\n\nexport const closeModal = () => (dispatch: Dispatch<ActionWeather>) => {\n  dispatch({\n    type: WeatherTypes.CLOSE_MODAL,\n  });\n};\n\nexport const setUnitConversion =\n  (unit: string) => (dispatch: Dispatch<ActionWeather>) => {\n    dispatch({\n      type: WeatherTypes.SET_UNIT_CONVERSION,\n      payload: unit,\n    });\n  };\n\nexport const getFiveDaysForecast =\n  (unit: string, city: CityData) =>\n  async (dispatch: Dispatch<ActionWeather>) => {\n    await api\n      .get(\n        `forecasts/v1/daily/5day/${city.Key}?apikey=${apikey}&metric=${\n          unit === \"C\" ? true : false\n        }`\n      )\n      .then(\n        (response) => {\n          const data = response.data;\n\n          dispatch({\n            type: WeatherTypes.FIVE_DAYS_FORECAST,\n            payload: data,\n          });\n        },\n        (error) => {\n          dispatch({\n            type: WeatherTypes.FIVE_DAYS_FORECAST_ERROR,\n            payload: error.message,\n          });\n          console.log(error.message, \"error message\");\n        }\n      );\n  };\n","/** @format */\nimport { Dispatch } from \"redux\";\nimport { CityData } from \"../../../Types/CityDataType\";\n\nimport { FavoritesCitiesTypes } from \"../../Enums/favoritesCitiesTypes\";\nimport { ActionFavoritesCities } from \"../types/favoritesCities\";\n\nexport const addCityToFavorites =\n  (city: CityData) => (dispatch: Dispatch<ActionFavoritesCities>) => {\n    dispatch({\n      type: FavoritesCitiesTypes.ADD_FAVORITE_CITY,\n      payload: city,\n    });\n  };\n\nexport const deleteCityFromFavorites =\n  (id: string) => (dispatch: Dispatch<ActionFavoritesCities>) => {\n    dispatch({\n      type: FavoritesCitiesTypes.DELETE_FAVORITE_CITY,\n      payload: id,\n    });\n  };\n","/** @format */\n\nexport const getWeatherIconUrl = (iconNumber: string | number) => {\n  iconNumber = iconNumber < 10 ? `0${iconNumber}` : iconNumber;\n  const src = `https://apidev.accuweather.com/developers/Media/Default/WeatherIcons/${iconNumber}-s.png`;\n  return src;\n};\n","/** @format */\n\nimport React from \"react\";\n\nimport \"./weatherCard.scss\";\nimport { getWeatherIconUrl } from \"../../../Helpers/getWeatherIconUrl\";\n\ntype Props = {\n  onClick?: ()=> void;\n  className: string;\n  cardKey: string;\n  cityName?: string;\n  iconSource: string|number;\n  alt?: string;\n  temperature?: string;\n  iconPhrase?: string;\n};\n\nconst WeatherCard: React.FC<Props> = (props) => {\n  const {\n    cardKey,\n    cityName,\n    iconSource,\n    alt,\n    temperature,\n    iconPhrase,\n    onClick\n  } = props;\n  return (\n    <div key={cardKey} className='weatherCard' onClick={onClick}>\n      <p className='cityName'>{cityName}</p>\n      <div className='icon'>\n        <img src={getWeatherIconUrl(iconSource)} alt={alt} />\n      </div>\n      <p className='currentTemperature'>{temperature}</p>\n      <p className='iconPhrase'>{iconPhrase}</p>\n    </div>\n  );\n};\n\nexport default WeatherCard;\n","export default __webpack_public_path__ + \"static/media/loader.a1a99674.gif\";","/** @format */\n\nimport React from \"react\";\nimport loader from \"../../../assets/loader.gif\";\nimport \"./Loader.scss\";\n\nconst Loader: React.FC = () => {\n  return (\n    <div id='loaderContainer'>\n      <img src={loader} alt='loader' />\n    </div>\n  );\n};\n\nexport default Loader;\n","/** @format */\n\nimport React, { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\nimport { bindActionCreators } from \"redux\";\n\nimport { showUnit } from \"../../Helpers/showUnit\";\nimport { weatherActionCreators } from \"../../Redux\";\nimport { WeatherState } from \"../../Redux/Actions/types/weather\";\nimport { RootState } from \"../../Redux/Reducers/rootReducer\";\nimport { CityData } from \"../../Types/CityDataType\";\nimport WeatherCard from \"../Home/WeatherComponents/WeatherCard\";\nimport Loader from \"../Widgets/Loader/Loader\";\n\ntype Props = {\n  city: CityData;\n};\n\nconst OneFavoritesCity: React.FC<Props> = (props) => {\n  const { city } = props;\n\n  const [currentWeather, setCurrentWeather] = useState<any>(undefined);\n  const history = useHistory();\n\n  const unit = useSelector<RootState, WeatherState[\"unit\"]>(\n    (state) => state.weatherInfo.unit\n  );\n\n  const dispatch = useDispatch();\n  const { getCurrentWeather, setCity } = bindActionCreators(\n    weatherActionCreators,\n    dispatch\n  );\n\n  useEffect(() => {\n    const getFavCurrentWeather = async () => {\n      const favCurrentWeater = await getCurrentWeather(city);\n      setCurrentWeather(favCurrentWeater);\n    };\n    getFavCurrentWeather();\n  }, []);\n\n  const onGoBack = () => {\n    setCity(city);\n    history.push(\"/home\");\n  };\n\n  const renderFavorites = () => {\n    if (currentWeather) {\n      return (\n        <WeatherCard\n          onClick={onGoBack}\n          iconPhrase={currentWeather.WeatherText}\n          iconSource={currentWeather.WeatherIcon}\n          className='currentWeatherCard'\n          cardKey={`currentWeather${city.Key}`}\n          cityName={city.LocalizedName}\n          temperature={showUnit(unit, currentWeather)}\n        />\n      );\n    } else if (currentWeather === \"No errors\") {\n      return <Loader />;\n    }\n  };\n\n  return <div key={`favWeatherContainer${city.Key}`}>{renderFavorites()}</div>;\n};\n\nexport default OneFavoritesCity;\n","/** @format */\n\nimport React from \"react\";\nimport { useSelector } from \"react-redux\";\n\nimport \"./favorites.scss\";\nimport { FavoritesCitiesState } from \"../../Redux/Actions/types/favoritesCities\";\nimport { RootState } from \"../../Redux/Reducers/rootReducer\";\nimport OneFavoritesCity from \"./OneFavoritesCity\";\nimport { CityData } from \"../../Types/CityDataType\";\n\nconst Favorites: React.FC = () => {\n  const favoritesCities = useSelector<\n    RootState,\n    FavoritesCitiesState[\"favoritesCities\"]\n  >((state) => state.favoritesCitiesInfo.favoritesCities);\n\n  return (\n    <div className='favorites'>\n      {favoritesCities.map((city: CityData) => (\n        <OneFavoritesCity city={city} />\n      ))}\n    </div>\n  );\n};\n\nexport default Favorites;\n","/** @format */\n\nimport { createGlobalStyle } from \"styled-components\";\n\nexport const GlobalStyles = createGlobalStyle`\n  body {\n    background: ${({ theme }) => theme.body};\n    color: ${({ theme }) => theme.text};\n    font-family: Tahoma, Helvetica, Arial, Roboto, sans-serif;\n    transition: all 0.50s linear;\n  }\n  .form-outline .form-control~.form-label{\n    color:${({ theme }) => theme.color}\n  }\n  .modal-header, .modal-body{\n    color:black!important\n  }\n  .form-outline .form-control{\n    color:${({ theme }) => theme.color}\n  }`;\n","/** @format */\n\nexport const lightTheme = {\n  body: \"#FFF\",\n  text: \"#363537\",\n  toggleBorder: \"#FFF\",\n  background: \"#363537\",\n  color:\"rgba(0,0,0,.6)\"\n};\nexport const darkTheme = {\n  body: \"#363537\",\n  text: \"#FAFAFA\",\n  toggleBorder: \"#6B8096\",\n  background: \"#999\",\n  color:\"#FAFAFA\"\n};\n","/** @format */\n\nimport React, { useState } from \"react\";\nimport { ThemeProvider } from \"styled-components\";\nimport { faToggleOn, faToggleOff } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { NavLink } from \"react-router-dom\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\n\nimport { GlobalStyles } from \"../Themes/GlobalStyles\";\nimport { lightTheme, darkTheme } from \"../Themes/Themes\";\nimport { weatherActionCreators } from \"../../Redux\";\nimport { RootState } from \"../../Redux/Reducers/rootReducer\";\nimport { WeatherState } from \"../../Redux/Actions/types/weather\";\nimport \"./header.scss\";\n\nconst Header: React.FC = () => {\n  const [theme, setTheme] = useState(\"light\");\n\n  const dispatch = useDispatch();\n  const { setUnitConversion } = bindActionCreators(\n    weatherActionCreators,\n    dispatch\n  );\n\n  const unit = useSelector<RootState, WeatherState[\"unit\"]>(\n    (state) => state.weatherInfo.unit\n  );\n\n  const switchUnit = () => {\n    unit === \"C\" ? setUnitConversion(\"F\") : setUnitConversion(\"C\");\n  };\n\n  const themeToggler = () => {\n    theme === \"light\" ? setTheme(\"dark\") : setTheme(\"light\");\n  };\n\n  return (\n    <ThemeProvider theme={theme === \"light\" ? lightTheme : darkTheme}>\n      <>\n        <GlobalStyles />\n        <div className='NavBar'>\n          <div>\n            <div onClick={themeToggler}>\n              <FontAwesomeIcon\n                icon={theme === \"light\" ? faToggleOff : faToggleOn}\n              />\n            </div>\n            <div className='switchUnit' onClick={switchUnit}>\n              {unit === \"C\" ? <p>C° to F°</p> : <p>F° to C°</p>}\n            </div>\n          </div>\n          <div className='title'>The Weather Channel</div>\n          <div className='links'>\n            <NavLink exact to='/'>\n              Home\n            </NavLink>\n            <NavLink to='/favorites'>Favorites</NavLink>\n          </div>\n        </div>\n      </>\n    </ThemeProvider>\n  );\n};\n\nexport default Header;\n","/** @format */\n\nimport { apikey } from \"../global\";\nimport api from \"./api\";\n\nexport const getLocationsAutoComplete = async (city: string) => {\n  let res;\n  try {\n    res = await api.get(\n      `locations/v1/cities/autocomplete?apikey=${apikey}&q=${city}`\n    );\n  } catch (error) {\n    console.log(error);\n  }\n\n  return res?.data;\n};\n","/** @format */\n\nimport React, { MouseEventHandler } from \"react\";\nimport { Button, Modal } from \"react-bootstrap\";\n\ntype Props = {\n  show: boolean;\n  message: string;\n  closeModal: MouseEventHandler<HTMLButtonElement>;\n};\n\nconst ModalComponent: React.FC<Props> = (props) => {\n  const { show, message, closeModal } = props;\n\n  return (\n    <>\n      <Modal show={show} onHide={closeModal}>\n        <Modal.Header closeButton>\n          <Modal.Title>Error</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>{message}</Modal.Body>\n        <Modal.Footer>\n          <Button variant='secondary' onClick={closeModal}>\n            Ok\n          </Button>\n        </Modal.Footer>\n      </Modal>\n    </>\n  );\n};\n\nexport default ModalComponent;\n","/** @format */\n\nimport React, { useRef, useState } from \"react\";\nimport debounce from \"lodash.debounce\";\nimport { useDispatch } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\nimport { MDBInput } from \"mdb-react-ui-kit\";\n\nimport { getLocationsAutoComplete } from \"../../../Services/getAutoComplete\";\nimport { weatherActionCreators } from \"../../../Redux\";\nimport { CityData } from \"../../../Types/CityDataType\";\nimport ModalComponent from \"../../Widgets/Modal/Modal\";\n\nconst SearchBar: React.FC = () => {\n  const dispatch = useDispatch();\n  const { setCity } = bindActionCreators(weatherActionCreators, dispatch);\n\n  const [cityInput, setCityInput] = useState<string>(\"\");\n  const [locations, setLocations] = useState<CityData[] | undefined>(undefined);\n  const [showAutoComplete, setShowAutoComplete] = useState<boolean>(true);\n  const [show, setShow] = useState<boolean>(false);\n  const [message, setMessage] = useState<string>(\"\");\n\n  const handleClose = () => setShow(false);\n  const handleShow = () => setShow(true);\n\n  const onChangeCity = (event: React.FormEvent<HTMLInputElement>) => {\n    const target = event.target as HTMLInputElement;\n    setCityInput(target.value);\n    const englishLetters = /^[A-Za-z]*$/;\n\n    if (!englishLetters.test(target.value)) {\n      setMessage(\"The search input can only contain english letters\");\n      handleShow();\n    } else {\n      doSearch(target.value);\n    }\n  };\n\n  const chooseCity = (location: CityData) => {\n    setShowAutoComplete(false);\n    setCity(location);\n  };\n\n  const doSearch = useRef(\n    // using debounce to delay request to backend\n    debounce(async (cityInput) => {\n      // backend request to do search\n      if (!cityInput) {\n        setShowAutoComplete(false);\n        return false;\n      }\n      const locations = await getLocationsAutoComplete(cityInput);\n      if (locations) {\n        setLocations(locations);\n        setShowAutoComplete(true);\n        setShow(false);\n      } else {\n        setShow(true);\n        setMessage(\"We couldn't complete your search, please try again later\");\n      }\n    }, 500)\n  ).current;\n\n  const renderAutoComplete = () => {\n    if (!showAutoComplete || !locations) return false;\n    let locationDiv = locations.map((location: CityData) => {\n      return (\n        <div\n          className={`location${location}`}\n          key={location.Key}\n          onClick={() => chooseCity(location)}>\n          {location.LocalizedName}, {location.Country?.LocalizedName}\n        </div>\n      );\n    });\n    return locationDiv;\n  };\n\n  return (\n    <>\n      <ModalComponent message={message} show={show} closeModal={handleClose} />\n\n      <form id='locationSearch'>\n        <MDBInput\n          onChange={onChangeCity}\n          value={cityInput}\n          type='text'\n          label='Search city'\n        />\n        <div>{renderAutoComplete()}</div>\n      </form>\n    </>\n  );\n};\n\nexport default SearchBar;\n","/** @format */\n\nimport React from \"react\";\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faStar } from \"@fortawesome/free-solid-svg-icons\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\n\nimport { RootState } from \"../../../Redux/Reducers/rootReducer\";\nimport { FavoritesCitiesState } from \"../../../Redux/Actions/types/favoritesCities\";\nimport { favoritesCitiesActionCreators } from \"../../../Redux\";\nimport { CityData } from \"../../../Types/CityDataType\";\nimport \"./favoriteButton.scss\";\n\ntype Props = {\n  city: CityData;\n};\nconst FavoriteButton: React.FC<Props> = (props) => {\n  const { city } = props;\n\n  const dispatch = useDispatch();\n  const { addCityToFavorites, deleteCityFromFavorites } = bindActionCreators(\n    favoritesCitiesActionCreators,\n    dispatch\n  );\n  const favoritesCities = useSelector<\n    RootState,\n    FavoritesCitiesState[\"favoritesCities\"]\n  >((state) => state.favoritesCitiesInfo.favoritesCities);\n\n  const toggleFav = favoritesCities.find(\n    (fav: CityData) => fav.Key === city.Key\n  );\n\n  const toggleFavorites = async () => {\n    toggleFav ? deleteCityFromFavorites(city.Key) : addCityToFavorites(city);\n  };\n\n  return (\n    <div id='favoriteIcon'>\n      <FontAwesomeIcon\n        onClick={toggleFavorites}\n        icon={faStar}\n        size='3x'\n        color={toggleFav ? \"#d7d705\" : \"#a09da2\"}\n      />\n    </div>\n  );\n};\n\nexport default FavoriteButton;\n","/** @format */\n\nimport React from \"react\";\nimport moment from \"moment\";\n\nimport { getWeatherIconUrl } from \"../../../Helpers/getWeatherIconUrl\";\nimport { DailyDataType } from \"../../../Types/DailyDataType\";\nimport \"./dailyForecast.scss\";\n\ntype Props = {\n  dailyForecast: DailyDataType;\n  unit: string;\n};\nconst DailyForecast: React.FC<Props> = (props) => {\n  const { dailyForecast, unit } = props;\n\n  const maxTemp = dailyForecast.Temperature.Maximum.Value;\n  const minTemp = dailyForecast.Temperature.Minimum.Value;\n\n  return (\n    <div className='dailyForecastContainer'>\n      <div className='dayAndDateContainer'>\n        <p className='day'>{moment(dailyForecast.Date).format(\"dddd\")}</p>\n        <p className='date'>{moment(dailyForecast.Date).format(\"MMM Do\")}</p>\n      </div>\n      <p className='temperature'>\n        {minTemp} {unit}° - {maxTemp} {unit}°\n      </p>\n      <div className='icon'>\n        <img\n          src={getWeatherIconUrl(dailyForecast.Day.Icon)}\n          alt={dailyForecast.Day.IconPhrase}\n        />\n      </div>\n      <p className='description'>{dailyForecast.Day.IconPhrase}</p>\n    </div>\n  );\n};\n\nexport default DailyForecast;\n","/** @format */\n\nimport React from \"react\";\nimport { useSelector } from \"react-redux\";\n\nimport { WeatherState } from \"../../../Redux/Actions/types/weather\";\nimport { RootState } from \"../../../Redux/Reducers/rootReducer\";\nimport { DailyDataType } from \"../../../Types/DailyDataType\";\nimport DailyForecast from \"./DailyForecast\";\nimport \"./fiveDaysForecast.scss\";\n\ntype Props = {\n  unit: string;\n};\n\nconst FiveDaysForecast: React.FC<Props> = (props) => {\n  const { unit } = props;\n\n  const fiveDaysForecast = useSelector<\n    RootState,\n    WeatherState[\"fiveDaysForecast\"]\n  >((state) => state.weatherInfo.fiveDaysForecast);\n\n  return (\n    <>\n      <h1>{fiveDaysForecast?.Headline.Text}</h1>\n      <div id='fiveDaysForecastBox'>\n        {fiveDaysForecast?.DailyForecasts.map(\n          (dailyForecast: DailyDataType) => (\n            <DailyForecast\n              key={dailyForecast.EpochDate}\n              unit={unit}\n              dailyForecast={dailyForecast}\n            />\n          )\n        )}\n      </div>\n    </>\n  );\n};\n\nexport default FiveDaysForecast;\n","/** @format */\nimport React, { useEffect, useRef } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\n\nimport { weatherActionCreators } from \"../../Redux/index\";\nimport SearchBar from \"./SearchBar/SearchBar\";\nimport WeatherCard from \"./WeatherComponents/WeatherCard\";\nimport { RootState } from \"../../Redux/Reducers/rootReducer\";\nimport { WeatherState } from \"../../Redux/Actions/types/weather\";\nimport { showUnit } from \"../../Helpers/showUnit\";\nimport FavoriteButton from \"./FavoriteIcon/FavoriteButton\";\nimport FiveDaysForecast from \"./FiveDaysForecast/FiveDaysForecast\";\nimport { getCityWithGeolocalisation } from \"../../Services/getGeolocalisation\";\nimport { CityData } from \"../../Types/CityDataType\";\nimport Loader from \"../Widgets/Loader/Loader\";\nimport ModalComponent from \"../Widgets/Modal/Modal\";\nimport \"./home.scss\";\n\nconst Home: React.FC = () => {\n  const dispatch = useDispatch();\n  const { getCurrentWeather, getFiveDaysForecast, setCity, closeModal } =\n    bindActionCreators(weatherActionCreators, dispatch);\n\n  const city = useSelector<RootState, WeatherState[\"city\"]>(\n    (state) => state.weatherInfo.city\n  );\n  const currentWeather = useSelector<RootState, WeatherState[\"currentWeather\"]>(\n    (state) => state.weatherInfo.currentWeather\n  );\n  const showModal = useSelector<RootState, WeatherState[\"showModal\"]>(\n    (state) => state.weatherInfo.showModal\n  );\n  const modalMessageCurrent = useSelector<\n    RootState,\n    WeatherState[\"modalMessageCurrent\"]\n  >((state) => state.weatherInfo.modalMessageCurrent);\n  const currentWeatherError = useSelector<\n    RootState,\n    WeatherState[\"currentWeatherError\"]\n  >((state) => state.weatherInfo.currentWeatherError);\n  const fiveDaysForecastError = useSelector<\n    RootState,\n    WeatherState[\"fiveDaysForecastError\"]\n  >((state) => state.weatherInfo.fiveDaysForecastError);\n  const modalMessageForecast = useSelector<\n    RootState,\n    WeatherState[\"modalMessageForecast\"]\n  >((state) => state.weatherInfo.modalMessageForecast);\n  const unit = useSelector<RootState, WeatherState[\"unit\"]>(\n    (state) => state.weatherInfo.unit\n  );\n\n  const stateRef: { current: CityData | undefined } = useRef();\n  stateRef.current = city;\n\n  useEffect(() => {\n    if (city) {\n      getCurrentWeather(city);\n      getFiveDaysForecast(unit, city);\n    } else {\n      getCityWithGeolocalisation(setCity);\n    }\n  }, [city, unit]);\n\n  const renderCurrentWeather = () => {\n    if (currentWeather && city) {\n      return (\n        <div id='currentWeatherContainer'>\n          <WeatherCard\n            iconPhrase={currentWeather.WeatherText}\n            iconSource={currentWeather.WeatherIcon}\n            className='currentWeatherCard'\n            cardKey={`currentWeather${city.Key}`}\n            cityName={city.LocalizedName}\n            temperature={showUnit(unit, currentWeather)}\n          />\n          <FavoriteButton city={city} />\n        </div>\n      );\n    } else if (showModal) {\n      const modalMessage = `Your request hasn't been processed for the following reason(s): \n      Current Weather - ${modalMessageForecast}, Forecast - ${modalMessageCurrent}`;\n      return (\n        <ModalComponent\n          message={modalMessage}\n          show={showModal}\n          closeModal={closeModal}\n        />\n      );\n    } else if (!currentWeatherError && city) {\n      return <Loader />;\n    }\n  };\n\n  const renderForecastWeather = () => {\n    if (city) {\n      return <FiveDaysForecast unit={unit} />;\n    } else if (!fiveDaysForecastError && city) {\n      return <Loader />;\n    }\n  };\n  return (\n    <>\n      <div id='homeContainer'>\n        <SearchBar />\n        <div>{renderCurrentWeather()}</div>\n        <div id='fiveDaysForecastContainer'>{renderForecastWeather()}</div>\n      </div>\n    </>\n  );\n};\n\nexport default Home;\n","/** @format */\n\nimport { Dispatch } from \"redux\";\n\nimport { apikey } from \"../global\";\nimport { ActionWeather } from \"../Redux/Actions/types/weather\";\nimport { CityData } from \"../Types/CityDataType\";\nimport api from \"./api\";\n\nexport const getCityWithGeolocalisation = (\n  setCity: (city: CityData) => (dispatch: Dispatch<ActionWeather>) => void\n) => {\n  navigator.permissions.query({ name: \"geolocation\" }).then((result) => {\n    if (result.state === \"prompt\" || result.state === \"granted\") {\n      navigator.geolocation.getCurrentPosition(async (location) => {\n        const { latitude, longitude } = location.coords;\n        await api\n          .get(\n            `locations/v1/cities/geoposition/search?apikey=${apikey}&q=${latitude},${longitude}`\n          )\n          .then((response) => {\n            const res = response.data;\n            setCity({ Key: res.Key, LocalizedName: res.LocalizedName });\n          })\n          .catch((error) => {\n            console.log(error);\n          });\n      });\n    } else if (result.state === \"denied\") {\n      setCity({ Key: \"215854\", LocalizedName: \"Tel Aviv\" });\n    }\n  });\n};\n","/** @format */\n\nimport React from \"react\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Redirect,\n} from \"react-router-dom\";\n\nimport Favorites from \"./Favorites/FavoritesCities\";\nimport Header from \"./Header/Header\";\nimport Home from \"./Home/Home\";\n\nconst Layout: React.FC = () => {\n  return (\n    <div className='layout'>\n      <Router>\n        <header>\n          <Header />\n        </header>\n        <main>\n          <Switch>\n            <Route exact path='/favorites' component={Favorites} />\n            <Route exact path='/home' component={Home} />\n            <Redirect exact from='/' to='home' />\n          </Switch>\n        </main>\n      </Router>\n    </div>\n  );\n};\n\nexport default Layout;\n","/** @format */\n\nimport { FavoritesCitiesTypes } from \"../Enums/favoritesCitiesTypes\";\nimport {\n  FavoritesCitiesState,\n  ActionFavoritesCities,\n} from \"../Actions/types/favoritesCities\";\n\nconst initialState: FavoritesCitiesState = {\n  favoritesCities: [],\n};\nexport default (\n  state = initialState,\n  action: ActionFavoritesCities\n): FavoritesCitiesState => {\n  switch (action.type) {\n    case FavoritesCitiesTypes.ADD_FAVORITE_CITY:\n      return {\n        ...state,\n        favoritesCities: [...state.favoritesCities, action.payload],\n      };\n\n    case FavoritesCitiesTypes.DELETE_FAVORITE_CITY:\n      return {\n        ...state,\n        favoritesCities: state.favoritesCities?.filter(\n          (fav) => fav.Key !== action.payload\n        ),\n      };\n\n    default:\n      return state;\n  }\n};\n","/** @format */\n\nimport { WeatherTypes } from \"../Enums/weatherTypes\";\nimport { WeatherState, ActionWeather } from \"../Actions/types/weather\";\n\nconst initialState: WeatherState = {\n  showModal: false,\n  modalMessageCurrent: \"\",\n  modalMessageForecast: \"\",\n  currentWeather: undefined,\n  currentWeatherError: undefined,\n  city: undefined,\n  unit: \"Celsius\",\n  fiveDaysForecastError: undefined,\n  fiveDaysForecast: undefined,\n};\nexport default (state = initialState, action: ActionWeather): WeatherState => {\n  switch (action.type) {\n    case WeatherTypes.CURRENT_WEATHER:\n      return {\n        ...state,\n        currentWeather: action.payload,\n        currentWeatherError: undefined,\n        showModal: false,\n        modalMessageCurrent: \"\",\n      };\n    case WeatherTypes.CURRENT_WEATHER_ERROR:\n      return {\n        ...state,\n        currentWeatherError: action.payload,\n        currentWeather: undefined,\n        showModal: true,\n        modalMessageCurrent: action.payload,\n      };\n    case WeatherTypes.SET_CITY:\n      return {\n        ...state,\n        city: action.payload,\n      };\n    case WeatherTypes.SET_UNIT_CONVERSION:\n      return {\n        ...state,\n        unit: action.payload,\n      };\n\n    case WeatherTypes.CLOSE_MODAL:\n      return {\n        ...state,\n        showModal: false,\n      };\n    case WeatherTypes.FIVE_DAYS_FORECAST:\n      return {\n        ...state,\n        fiveDaysForecast: action.payload,\n        fiveDaysForecastError: undefined,\n        showModal: false,\n        modalMessageForecast: \"\",\n      };\n    case WeatherTypes.FIVE_DAYS_FORECAST_ERROR:\n      return {\n        ...state,\n        fiveDaysForecast: undefined,\n        fiveDaysForecastError: action.payload,\n        showModal: true,\n        modalMessageForecast: action.payload,\n      };\n\n    default:\n      return state;\n  }\n};\n","/** @format */\n\nimport { combineReducers } from \"redux\";\nimport favoritesCitiesReducer from \"./favoritesCitiesReducer\";\nimport weatherReducer from \"./weatherReducer\";\n\nconst rootReducer = combineReducers({\n  weatherInfo: weatherReducer,\n  favoritesCitiesInfo: favoritesCitiesReducer,\n});\n\nexport default rootReducer;\nexport type RootState = ReturnType<typeof rootReducer>;\n","/** @format */\n\nimport {\n  createStore,\n  compose,\n  applyMiddleware,\n  Store,\n  EmptyObject,\n} from \"redux\";\nimport { WeatherState } from \"./Actions/types/weather\";\nimport { Actions } from \"./Actions/index\";\nimport { persistStore, persistReducer } from \"redux-persist\";\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\nimport thunk from \"redux-thunk\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\n\nimport rootReducer from \"./Reducers/rootReducer\";\nimport { PersistPartial } from \"redux-persist/es/persistReducer\";\nimport { Dispatch } from \"react\";\n\nconst persistConfig = {\n  key: \"root\",\n  storage: AsyncStorage,\n};\nconst persistedReducer = persistReducer(persistConfig, rootReducer);\nconst store: Store<\n  EmptyObject & {\n    weatherInfo: WeatherState;\n  } & PersistPartial,\n  Actions\n> & {\n  dispatch: Dispatch<Actions>;\n} = createStore(\n  persistedReducer,\n  compose(composeWithDevTools(applyMiddleware(thunk)))\n);\nlet persistor = persistStore(store);\nexport const reduxStore = {\n  store,\n  persistor,\n};\n","/** @format */\n\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport Layout from \"./Components/Layout\";\nimport { Provider } from \"react-redux\";\nimport { reduxStore } from \"./Redux/store\";\nimport 'mdb-react-ui-kit/dist/css/mdb.min.css'\n\n\nReactDOM.render(\n  <Provider store={reduxStore.store}>\n    <Layout />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}